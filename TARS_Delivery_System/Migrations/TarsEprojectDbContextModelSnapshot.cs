// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TARS_Delivery_System.Models;

#nullable disable

namespace TARS_Delivery_System.Migrations
{
    [DbContext(typeof(Tars_EprojectDbContext))]
    partial class TarsEprojectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.BranchTbl", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("Branch_id");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Branch_name");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Contact_number");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PinCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Pin_Code");

                    b.HasKey("BranchId");

                    b.ToTable("Branch_Tbl", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.DeliverablesTbl", b =>
                {
                    b.Property<int>("DeliverableId")
                        .HasColumnType("int")
                        .HasColumnName("Deliverable_id");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("Branch_id");

                    b.Property<decimal>("Charge")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("charge");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Delivery_date");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Delivery_type");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Payment_status");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Product_Name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Receiver_Address");

                    b.Property<string>("ReceiverContact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Receiver_Contact");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Receiver_Name");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Send_date");

                    b.Property<string>("SenderContact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Sender_Contact");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Sender_Name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("TrackingId")
                        .HasColumnType("int")
                        .HasColumnName("Tracking_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DeliverableId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Deliverables_Tbl", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.EmployeesTbl", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_id");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("Branch_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees_Tbl", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.LogsTbl", b =>
                {
                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("Log_id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAdress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Ip_adress");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Log_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs_Tbl", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.PaymentTbl", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("DeliverableId")
                        .HasColumnType("int")
                        .HasColumnName("Deliverable_id");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Payment_method");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Payment_status");

                    b.HasKey("PaymentId");

                    b.HasIndex("DeliverableId");

                    b.ToTable("Payment_Tbl", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.ServiceChargesTbl", b =>
                {
                    b.Property<int>("ServiceChargeId")
                        .HasColumnType("int")
                        .HasColumnName("Service_charge_id");

                    b.Property<decimal>("BaseCharge")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Base_charge");

                    b.Property<decimal?>("DistanceFactor")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Distance_factor");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Service_type");

                    b.Property<decimal>("WeightFactor")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Weight_factor");

                    b.HasKey("ServiceChargeId");

                    b.ToTable("Service_Charges_Tbl", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.TrackingTbl", b =>
                {
                    b.Property<int>("TrackingId")
                        .HasColumnType("int")
                        .HasColumnName("Tracking_id");

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Action_taken");

                    b.Property<int>("DeliverableId")
                        .HasColumnType("int")
                        .HasColumnName("Deliverable_id");

                    b.Property<byte[]>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Update_date");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Updated_by");

                    b.HasKey("TrackingId");

                    b.HasIndex("DeliverableId");

                    b.ToTable("Tracking_Tbl", (string)null);
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.UserTbl", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Contact_number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("User_email");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("User_name");

                    b.HasKey("UserId");

                    b.ToTable("User_Tbl", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.DeliverablesTbl", b =>
                {
                    b.HasOne("TARS_Delivery_System.Models.BranchTbl", "Branch")
                        .WithMany("DeliverablesTbls")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Deliverables_Tbl_Branch_Tbl");

                    b.HasOne("TARS_Delivery_System.Models.UserTbl", "User")
                        .WithMany("DeliverablesTbls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Deliverables_Tbl_User_Tbl");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.EmployeesTbl", b =>
                {
                    b.HasOne("TARS_Delivery_System.Models.BranchTbl", "Branch")
                        .WithMany("EmployeesTbls")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Tbl_Branch_Tbl");

                    b.HasOne("TARS_Delivery_System.Models.UserTbl", "User")
                        .WithMany("EmployeesTbls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Tbl_User_Tbl");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.LogsTbl", b =>
                {
                    b.HasOne("TARS_Delivery_System.Models.UserTbl", "User")
                        .WithMany("LogsTbls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Logs_Tbl_User_Tbl");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.PaymentTbl", b =>
                {
                    b.HasOne("TARS_Delivery_System.Models.DeliverablesTbl", "Deliverable")
                        .WithMany("PaymentTbls")
                        .HasForeignKey("DeliverableId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Tbl_Deliverables_Tbl");

                    b.Navigation("Deliverable");
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.TrackingTbl", b =>
                {
                    b.HasOne("TARS_Delivery_System.Models.DeliverablesTbl", "Deliverable")
                        .WithMany("TrackingTbls")
                        .HasForeignKey("DeliverableId")
                        .IsRequired()
                        .HasConstraintName("FK_Tracking_Tbl_Deliverables_Tbl");

                    b.Navigation("Deliverable");
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.BranchTbl", b =>
                {
                    b.Navigation("DeliverablesTbls");

                    b.Navigation("EmployeesTbls");
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.DeliverablesTbl", b =>
                {
                    b.Navigation("PaymentTbls");

                    b.Navigation("TrackingTbls");
                });

            modelBuilder.Entity("TARS_Delivery_System.Models.UserTbl", b =>
                {
                    b.Navigation("DeliverablesTbls");

                    b.Navigation("EmployeesTbls");

                    b.Navigation("LogsTbls");
                });
#pragma warning restore 612, 618
        }
    }
}
